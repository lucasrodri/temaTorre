{"version":3,"file":"components/wizard/wizard.min.js","mappings":"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","sources":["webpack://dsgov/webpack/universalModuleDefinition","webpack://dsgov/./src/components/wizard/wizard.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"dsgov\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"dsgov\"] = factory();\n\telse\n\t\troot[\"dsgov\"] = factory();\n})(self, function() {\nreturn ","import SwipeEventDispatcher from '../swipe/swipe'\nclass BRWizard {\n  constructor(name, component) {\n    this.name = name\n    this.component = component\n    // DOM elements\n    this.DOMstrings = {\n      stepFormPanelClass: 'wizard-panel',\n      // stepFormPanels: document.querySelectorAll('.wizard-panel'),\n      stepFormPanels: this.component.querySelectorAll('.wizard-panel'),\n      stepNextBtnClass: 'wizard-btn-next',\n      stepPrevBtnClass: 'wizard-btn-prev',\n      // stepsBar: document.querySelector('.wizard-progress'),\n      stepsBar: this.component.querySelector('.wizard-progress'),\n      stepsBarClass: 'wizard-progress',\n      stepsBtnClass: 'wizard-progress-btn',\n      // stepsBtns: document.querySelectorAll(`.wizard-progress-btn`),\n      stepsBtns: this.component.querySelectorAll('.wizard-progress-btn'),\n      // stepsForm: document.querySelector('.wizard-form'),\n      stepsForm: this.component.querySelector('.wizard-form'),\n    }\n    // remove class from a set of items\n    this.removeAttributes = (elemSet, attrName) => {\n      elemSet.forEach((elem) => {\n        elem.removeAttribute(attrName)\n      })\n    }\n    // return exect parent node of the element\n    this.findParent = (elem, parentClass) => {\n      let currentNode = elem\n      while (!currentNode.classList.contains(parentClass)) {\n        currentNode = currentNode.parentNode\n      }\n      return currentNode\n    }\n    // get active button step number\n    this.getActiveStep = (elem) => {\n      return Array.from(this.DOMstrings.stepsBtns).indexOf(elem)\n    }\n    // set all steps before clicked (and clicked too) to active\n    this.setActiveStep = (activeStepNum) => {\n      // remove active state from all the state\n      this.removeAttributes(this.DOMstrings.stepsBtns, 'active')\n      // this.removeAttributes(this.DOMstrings.stepsBtns, 'disabled')\n\n      // set picked items to active\n      this.DOMstrings.stepsBtns.forEach((elem, index) => {\n        if (index === activeStepNum) {\n          elem.removeAttribute('disabled')\n          elem.setAttribute('active', '')\n        }\n        // if (index > activeStepNum) {\n        //   elem.setAttribute('disabled', 'disabled')\n        // }\n      })\n    }\n    // get active panel\n    this.getActivePanel = () => {\n      let activePanel\n      this.DOMstrings.stepFormPanels.forEach((elem) => {\n        if (elem.hasAttribute('active')) {\n          activePanel = elem\n        }\n      })\n      return activePanel\n    }\n    // open active panel (and close unactive panels)\n    this.setActivePanel = (activePanelNum) => {\n      // remove active class from all the panels\n      this.removeAttributes(this.DOMstrings.stepFormPanels, 'active')\n      // show active panel\n      this.DOMstrings.stepFormPanels.forEach((elem, index) => {\n        if (index === activePanelNum) {\n          elem.setAttribute('active', '')\n        }\n      })\n    }\n    this.setStepsNum = () => {\n      this.DOMstrings.stepsBtns.forEach((elem, index) => {\n        elem.setAttribute('step', index + 1)\n      })\n    }\n    this.setStep = (num) => {\n      const activeStep = num <= this.DOMstrings.stepsBtns.length ? num - 1 : 0\n      this.setActiveStep(activeStep)\n      this.setActivePanel(activeStep)\n    }\n    this.collapseSteps = () => {\n      this.component.setAttribute('collapsed', '')\n    }\n    this.expandSteps = () => {\n      this.component.removeAttribute('collapsed')\n    }\n    this._setBehavior()\n  }\n\n  _setBehavior() {\n    // STEPS BAR CLICK FUNCTION\n    this.DOMstrings.stepsBar.addEventListener('click', (e) => {\n      // check if click target is a step button\n      const eventTarget = e.target\n      if (!eventTarget.classList.contains(`${this.DOMstrings.stepsBtnClass}`)) {\n        e.target.parentNode.click()\n        return\n      }\n      // get active button step number\n      const activeStep = this.getActiveStep(eventTarget)\n      // set all steps before clicked (and clicked too) to active\n      this.setActiveStep(activeStep)\n      // open active panel\n      this.setActivePanel(activeStep)\n    })\n    // PREV/NEXT BTNS CLICK\n    this.DOMstrings.stepsForm.addEventListener('click', (e) => {\n      const eventTarget = e.target\n      // check if we clicked on `PREV` or NEXT` buttons\n      if (\n        !(\n          eventTarget.classList.contains(\n            `${this.DOMstrings.stepPrevBtnClass}`\n          ) ||\n          eventTarget.classList.contains(`${this.DOMstrings.stepNextBtnClass}`)\n        )\n      ) {\n        return\n      }\n      // find active panel\n      const activePanel = this.findParent(\n        eventTarget,\n        `${this.DOMstrings.stepFormPanelClass}`\n      )\n      let activePanelNum = Array.from(this.DOMstrings.stepFormPanels).indexOf(\n        activePanel\n      )\n      // set active step and active panel onclick\n      if (\n        eventTarget.classList.contains(`${this.DOMstrings.stepPrevBtnClass}`)\n      ) {\n        activePanelNum -= 1\n        activePanel.style.left = '1%'\n      } else {\n        activePanelNum += 1\n        activePanel.style.left = '-1%'\n      }\n      this.setActiveStep(activePanelNum)\n      this.setActivePanel(activePanelNum)\n    })\n    // Set Steps label number\n    this.setStepsNum()\n    // Set default active step\n    if (this.component.hasAttribute('step')) {\n      this.setStep(this.component.getAttribute('step'))\n    }\n    // set steps buttons grid style if it needs to scroll horizontaly\n    if (\n      this.component.hasAttribute('scroll') &&\n      !this.component.hasAttribute('vertical')\n    ) {\n      const stepsWidth =\n        Math.round(100 / this.DOMstrings.stepsBtns.length) - 0.5\n      this.DOMstrings.stepsBar.style.gridTemplateColumns = `repeat(auto-fit, minmax(100px, ${stepsWidth}% ))`\n    }\n    // Swipe\n    const dispatcher = new SwipeEventDispatcher(this.DOMstrings.stepsBar)\n    if (this.component.hasAttribute('vertical')) {\n      dispatcher.on('SWIPE_LEFT', () => {\n        this.collapseSteps()\n      })\n      dispatcher.on('SWIPE_RIGHT', () => {\n        this.expandSteps()\n      })\n      this.DOMstrings.stepsForm.ontouchstart = () => {\n        this.collapseSteps()\n      }\n    } else {\n      this.DOMstrings.stepsBar.ontouchstart = () => {\n        this.expandSteps()\n      }\n      this.DOMstrings.stepsForm.ontouchstart = () => {\n        this.collapseSteps()\n      }\n    }\n  }\n}\n\nexport default BRWizard\n"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","BRWizard","constructor","name","component","this","DOMstrings","stepFormPanelClass","stepFormPanels","querySelectorAll","stepNextBtnClass","stepPrevBtnClass","stepsBar","querySelector","stepsBarClass","stepsBtnClass","stepsBtns","stepsForm","removeAttributes","elemSet","attrName","forEach","elem","removeAttribute","findParent","parentClass","currentNode","classList","contains","parentNode","getActiveStep","Array","from","indexOf","setActiveStep","activeStepNum","index","setAttribute","getActivePanel","activePanel","hasAttribute","setActivePanel","activePanelNum","setStepsNum","setStep","num","activeStep","length","collapseSteps","expandSteps","_setBehavior","addEventListener","e","eventTarget","target","click","style","left","getAttribute","stepsWidth","Math","round","gridTemplateColumns","dispatcher","SwipeEventDispatcher","on","ontouchstart"],"sourceRoot":""}