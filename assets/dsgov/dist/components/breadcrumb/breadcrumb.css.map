{"version":3,"file":"components/breadcrumb/breadcrumb.css","mappings":"AAKA;ECCE;EAoHA;EACA;ADvHF;ACkEE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ADhEJ;ACJE;EACE;EACA;EACA;EACA;ADMJ;ACJI;EACE;EACA;ADMN;ACJM;EACE;ADMR;ACFI;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ADIN;ACDI;EAEE;EACA;EACA;EACA;EACA;ADEN;ACAM;EACE;EACA;ADER;ACAQ;EACE;EACA;ADEV;ACIM;EACE;EACA;EACA;EACA;EACA;EACA;ADFR;ACyBE;EACE;EACA;EACA;EACA;EACA;ADvBJ;AC0BM;EACE;ADxBR;AC2BU;EACE;EACA;ADzBZ;AEnEI;EACE;AFqEN;ACwBY;EACE;ADtBd;ACyBY;EACE;EACA;EACA;EACA;EACA;EACA;ADvBd;AG3DE;EFsGI;IACE;EDxCN;EC4CE;IACE;ED1CJ;AACF;AGnEE;EFiHE;IACE;IACA;IACA;IACA;IACA;ED3CJ;EC8CE;;;IAGE;ED5CJ;AACF,C","sources":["webpack://dsgov/./src/components/breadcrumb/_breadcrumb.scss","webpack://dsgov/./src/components/breadcrumb/_mixins.scss","webpack://dsgov/./src/partial/scss/mixins/_hover.scss","webpack://dsgov/./src/partial/scss/mixins/_grid.scss"],"sourcesContent":["@use \"sass:math\";\n @import \"../../partial/scss/base\";\n \n@import \"mixins\";\n\n.#{$prefix}breadcrumb {\n  @include breadcrumb-configs;\n}\n","@mixin breadcrumb-configs {\n  @include breadcrumb-tokens;\n  @include breadcrumb-default;\n}\n\n@mixin breadcrumb-tokens {\n  --breadcrumb-font-size: v(font-size-scale-down-01);\n}\n\n@mixin breadcrumb-crumb {\n  .crumb {\n    align-items: center;\n    display: flex;\n    height: v(spacing-scale-5x);\n    margin: auto 0 auto -5px;\n\n    .icon {\n      color: v(color-secondary-04);\n      font-size: v(icon-size-sm);\n\n      &.fas.fa-chevron-right {\n        margin-right: -6px;\n      }\n    }\n\n    a {\n      cursor: pointer;\n      font-size: v(font-size-scale-down-01);\n      font-weight: v(font-weight-medium);\n      max-width: 180px;\n      overflow: hidden;\n      padding: 0 6px;\n      text-decoration: none;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n\n    &.home,\n    &.menu-mobil {\n      --focus-offset: calc(var(--spacing-scale-half) * -1);\n      align-items: center;\n      display: flex;\n      margin-left: 0;\n      margin-right: -3px;\n\n      .icon {\n        color: var(--interactive);\n        position: static;\n\n        &.fas.fa-chevron-right {\n          color: var(--color-secondary-04);\n          margin-right: -8px;\n        }\n      }\n    }\n    // Item ativo\n    &[data-active=\"active\"] {\n      span {\n        color: v(color-secondary-08);\n        cursor: default;\n        font-size: v(font-size-scale-down-01);\n        font-weight: v(font-weight-medium);\n        padding: 0 0 0 var(--spacing-scale-base);\n        white-space: nowrap;\n      }\n    }\n  }\n}\n\n@mixin breadcrumb-list {\n  .crumb-list {\n    align-items: center;\n    border: 0;\n    display: flex;\n    list-style: none;\n    margin: 0;\n    overflow-x: auto;\n    overflow-y: hidden;\n    padding: 0;\n    // Cada item\n    @include breadcrumb-crumb();\n  }\n}\n\n// TODO: Refazer ou remover esse mixin\n@mixin breadcrumb-card {\n  .br-card {\n    left: v(spacing-scale-9x);\n    position: absolute;\n    top: v(spacing-scale-7x);\n    width: fit-content;\n    z-index: var(--z-index-layer-1);\n\n    .front {\n      .content {\n        padding: 0;\n\n        .br-list {\n          .br-item {\n            color: var(--color);\n            cursor: pointer;\n            @include hover(\"color\");\n            &:not(:last-child) {\n              border-bottom: 1px solid var(--border-color);\n            }\n\n            a {\n              color: var(--color);\n              display: inline-block;\n              max-width: 180px;\n              overflow: hidden;\n              text-overflow: ellipsis;\n              white-space: nowrap;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n@mixin breadcrumb-default {\n  display: inline-grid;\n  position: relative;\n  // Página inicial\n\n  @include breadcrumb-list();\n\n  @include breadcrumb-card();\n\n  @include media-breakpoint-down(xs) {\n    .crumb-list .menu-mobil > {\n      .icon {\n        display: none;\n      }\n    }\n\n    .br-card {\n      left: v(spacing-scale-base);\n    }\n  }\n\n  @include media-breakpoint-down(sm) {\n    .crumb-list .crumb a {\n      display: block;\n      max-width: 180px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n\n    .crumb-list .crumb.menu-mobil,\n    .crumb-list .crumb.menu-mobil + .crumb,\n    .crumb-list .crumb.home + .crumb {\n      display: flex;\n    }\n  }\n}\n","/// Aplica hover: feedback ao colocar o cursor no elemento\n/// @param {String} $color [\"interactive\"] - Cor do hover **(Opcional)**\n/// @example scss - Uso prático\n///  a {\n///    @include hover;\n///  }\n@mixin hover($color: \"interactive\") {\n  &:not(:disabled) {\n    &:hover {\n      background-image: linear-gradient(\n        rgba(var(--#{$color}-rgb), var(--hover)),\n        rgba(var(--#{$color}-rgb), var(--hover))\n      );\n    }\n  }\n}\n","// Dependência para calcular divisão\n@use \"sass:math\";\n\n/// Aplica os estilos **a partir** do breakpoint informado\n/// @group 02\n/// @param {String} $breakpoint - **Usar**: xs, sm, md, lg ou xl\n/// @example scss - Aplicar estilos em **lg** e **xl**\n///  .#{$prefix}cookiebar {\n///    @include media-breakpoint-up(lg) {\n///      ...\n///    }\n///  }\n@mixin media-breakpoint-up($breakpoint) {\n  $size: map-get($breakpoints, $breakpoint);\n  @media (min-width: $size) {\n    @content;\n  }\n}\n\n/// Aplica os estilos **até** o breakpoint informado\n/// @group 02\n/// @param {String} $breakpoint - **Usar**: xs, sm, md, lg ou xl\n/// @example scss - Aplicar estilos em **xs**, **sm** e **md**\n///  .#{$prefix}cookiebar {\n///    @include media-breakpoint-down(md) {\n///      ...\n///    }\n///  }\n@mixin media-breakpoint-down($breakpoint) {\n  $value: map-get($breakpoints, next-breakpoint($breakpoint)) - 1px;\n  @media (max-width: $value) {\n    @content;\n  }\n}\n\n/// Cria containers e linhas da Grid\n/// @group 03\n/// @param {String} $breakpoint - **Usar**: xs, sm, md, lg ou xl\n/// @example scss - Uso prático\n///  @include make-grid(lg);\n@mixin make-grid($breakpoint) {\n  $breakpoint-name: map-get($breakpoints-name, $breakpoint);\n  $breakpoint-width: map-get($breakpoints, $breakpoint);\n  @media (min-width: $breakpoint-width) {\n    .container,\n    .container-sm,\n    .container-md,\n    .container-lg,\n    .container-xl,\n    .container-fluid {\n      --grid-margin: var(--grid-#{$breakpoint-name}-margin);\n    }\n\n    .row {\n      --grid-gutter: var(--grid-#{$breakpoint-name}-gutter);\n    }\n    @if $breakpoint == \"sm\" {\n      .container,\n      .container-sm {\n        --grid-maxwidth: calc(\n          var(--grid-breakpoint-#{$breakpoint}) -\n            var(--grid-#{$breakpoint-name}-margin)\n        );\n      }\n    }\n    @if $breakpoint == \"md\" {\n      .container,\n      .container-sm,\n      .container-md {\n        --grid-maxwidth: calc(\n          var(--grid-breakpoint-#{$breakpoint}) -\n            var(--grid-#{$breakpoint-name}-margin)\n        );\n      }\n    }\n    @if $breakpoint == \"lg\" {\n      .container,\n      .container-sm,\n      .container-md,\n      .container-lg {\n        --grid-maxwidth: calc(\n          var(--grid-breakpoint-#{$breakpoint}) -\n            var(--grid-#{$breakpoint-name}-margin)\n        );\n      }\n    }\n    @if $breakpoint == \"xl\" {\n      .container,\n      .container-sm,\n      .container-md,\n      .container-lg,\n      .container-xl {\n        --grid-maxwidth: calc(\n          var(--grid-breakpoint-#{$breakpoint}) -\n            var(--grid-#{$breakpoint-name}-margin)\n        );\n      }\n    }\n    @include make-columns($grid-desktop-columns, $breakpoint);\n  }\n}\n\n/// Cria as colunas da Grid.\n/// @group 03\n/// @param {Number} $columns - **Usar**: 4, 8 ou 12\n/// @param {String} $breakpoint [null] - **Usar**: xs, sm, md, lg ou xl **(Opcional)**\n/// @example scss - Criar classes até 4 colunas\n///  @include make-columns(4);\n/// @example scss - Criar classes até 8 colunas para breakpoint **sm**\n///  @include make-columns(8, \"sm\");\n@mixin make-columns($columns, $breakpoint: null) {\n  .col#{if($breakpoint, \"-#{$breakpoint}\", \"\")} {\n    flex: 1 0 0%;\n    min-width: math.div(1, $columns) * 100%;\n  }\n  .col#{if($breakpoint, \"-#{$breakpoint}\", \"\")}-auto {\n    flex: 0 0 auto;\n    width: auto;\n  }\n  @for $i from 1 through $columns {\n    .col#{if($breakpoint, \"-#{$breakpoint}\", \"\")}-#{$i} {\n      flex-basis: math.div($i, $columns) * 100%;\n      max-width: math.div($i, $columns) * 100%;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}