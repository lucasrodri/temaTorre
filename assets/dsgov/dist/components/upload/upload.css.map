{"version":3,"file":"components/upload/upload.css","mappings":"AAKA;ECEE;EACA;EAIA;EAyHA;ADhIF;AEyBE;EDfE;IACE;IACA;IACA;EDPJ;ECWI;IACE;IACA;EDTN;ECaE;IACE;EDXJ;ECcE;IACE;IACA;EDZJ;AACF;ACeE;EACE;ADbJ;ACiBI;EACE;ADfN;ACiBM;;EAEE;EACA;ADfR;ACoBE;EACE;EACA;ADlBJ;ACoBI;EACE;ADlBN;ACsBE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ADpBJ;ACsBI;EACE;EACA;EACA;ADpBN;ACuBI;EACE;EACA;EACA;EACA;EACA;ADrBN;ACyBE;EACE;EACA;ADvBJ;ACyBI;EACE;EACA;EACA;EACA;EACA;ADvBN;AC0BI;EACE;EACA;ADxBN;AC2BI;EACE;EACA;EACA;EACA;EACA;EACA;EACA;ADzBN;AC6BE;EACE;AD3BJ;AC8BE;EACE;qDAAA;EAEA;EACA;AD5BJ;AC8BI;EACE;AD5BN;ACwCM;EACE,4BANkB;ADhC1B;ACwCM;EACE;EACA,0BAVkB;EAWlB;EACA;EACA;EACA;EACA;ADtCR;AC4BM;EACE,2BANkB;ADpB1B;AC4BM;EACE;EACA,yBAVkB;EAWlB;EACA;EACA;EACA;EACA;AD1BR;ACgBM;EACE,4BANkB;ADR1B;ACgBM;EACE;EACA,0BAVkB;EAWlB;EACA;EACA;EACA;EACA;ADdR;ACiBQ;EACE;ADfV;ACCM;EACE,yBANkB;ADO1B;ACCM;EACE;EACA,uBAVkB;EAWlB;EACA;EACA;EACA;EACA;ADCR,C","sources":["webpack://dsgov/./src/components/upload/_upload.scss","webpack://dsgov/./src/components/upload/_mixins.scss","webpack://dsgov/./src/partial/scss/mixins/_grid.scss"],"sourcesContent":["@use \"sass:math\";\n @import \"../../partial/scss/base\";\n \n@import \"mixins\";\n\n.#{$prefix}upload {\n  @include upload-configs;\n}\n","@mixin upload-configs {\n  @include upload-tokens;\n  @include upload-default;\n  @include upload-state;\n}\n\n@mixin upload-tokens {\n  --onboarding-dragging-color: var(--color-danger);\n  --upload-z-index: var(--z-index-layer-0);\n}\n\n@mixin upload-default {\n  z-index: var(--upload-z-index);\n\n  @include media-breakpoint-down(xs) {\n    .br-button.upload-button {\n      height: auto;\n      padding: v(spacing-scale-base) v(spacing-scale-2x);\n      width: 100% !important;\n    }\n\n    .upload-button {\n      span {\n        font-size: v(font-size-scale-down-01);\n        white-space: break-spaces;\n      }\n    }\n\n    .item {\n      flex-wrap: nowrap;\n    }\n\n    .upload-list .support {\n      flex-shrink: 0;\n      margin-right: var(--spacing-scale-base);\n    }\n  }\n\n  input {\n    display: none;\n  }\n\n  &.dragging {\n    .upload-button {\n      background-color: v(color-support-01);\n\n      span,\n      svg {\n        color: var(--interactive);\n        pointer-events: none;\n      }\n    }\n  }\n\n  .br-button.upload-button {\n    max-width: 550px;\n    width: 100%;\n\n    &:active * {\n      color: v(color-primary-pastel-01);\n    }\n  }\n\n  .upload-button {\n    border: var(--surface-width-sm) dashed;\n    border-color: var(--interactive);\n    border-radius: var(--surface-rounder-sm);\n    display: block;\n    padding-left: v(spacing-scale-2x);\n    padding-right: v(spacing-scale-2x);\n    text-align: left;\n    width: 100%;\n\n    svg {\n      color: var(--interactive);\n      font-size: v(icon-size-lg);\n      padding-left: var(--spacing-scale-2x);\n    }\n\n    span {\n      color: var(--interactive);\n      font-size: v(font-size-scale-base);\n      font-style: italic;\n      font-weight: v(font-weight-regular);\n      padding-left: v(spacing-scale-half);\n    }\n  }\n\n  .upload-list {\n    max-width: 550px;\n    position: relative;\n\n    .content {\n      align-self: center;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      width: 70%;\n    }\n\n    .support {\n      align-items: center;\n      display: flex;\n    }\n\n    .cargas {\n      box-sizing: border-box;\n      color: v(color-secondary-08);\n      display: inline-block;\n      left: 54%;\n      position: relative;\n      text-align: right;\n      top: 4px;\n    }\n  }\n\n  .br-tooltip {\n    max-width: 93%;\n  }\n\n  .#{$prefix}item {\n    --item-padding: var(--spacing-scale-half) var(--spacing-scale-base)\n      var(--spacing-scale-half) var(--spacing-scale-2x);\n    align-items: center;\n    display: flex;\n\n    &:first-child {\n      margin-top: calc(var(--spacing-scale-half) * 2);\n    }\n  }\n}\n\n@mixin upload-state {\n  /*** Estados ***/\n  @each $state, $color in (success, v(success)), (danger, v(danger)),\n    (warning, v(warning)), (info, v(info))\n  {\n    &.#{$state},\n    &[data-#{$state}] {\n      .upload-button {\n        border-color: $color;\n      }\n      .feedback.color-#{$state} {\n        align-items: center;\n        background: $color;\n        color: var(--color-secondary-01) !important;\n        display: inline-flex;\n        height: 35px;\n        margin-bottom: var(--spacing-scale-base);\n        padding: 5px;\n      }\n      @if ($state == warning) {\n        .feedback.color-warning {\n          color: var(--color-secondary-08) !important;\n        }\n      }\n    }\n  }\n}\n","// Dependência para calcular divisão\n@use \"sass:math\";\n\n/// Aplica os estilos **a partir** do breakpoint informado\n/// @group 02\n/// @param {String} $breakpoint - **Usar**: xs, sm, md, lg ou xl\n/// @example scss - Aplicar estilos em **lg** e **xl**\n///  .#{$prefix}cookiebar {\n///    @include media-breakpoint-up(lg) {\n///      ...\n///    }\n///  }\n@mixin media-breakpoint-up($breakpoint) {\n  $size: map-get($breakpoints, $breakpoint);\n  @media (min-width: $size) {\n    @content;\n  }\n}\n\n/// Aplica os estilos **até** o breakpoint informado\n/// @group 02\n/// @param {String} $breakpoint - **Usar**: xs, sm, md, lg ou xl\n/// @example scss - Aplicar estilos em **xs**, **sm** e **md**\n///  .#{$prefix}cookiebar {\n///    @include media-breakpoint-down(md) {\n///      ...\n///    }\n///  }\n@mixin media-breakpoint-down($breakpoint) {\n  $value: map-get($breakpoints, next-breakpoint($breakpoint)) - 1px;\n  @media (max-width: $value) {\n    @content;\n  }\n}\n\n/// Cria containers e linhas da Grid\n/// @group 03\n/// @param {String} $breakpoint - **Usar**: xs, sm, md, lg ou xl\n/// @example scss - Uso prático\n///  @include make-grid(lg);\n@mixin make-grid($breakpoint) {\n  $breakpoint-name: map-get($breakpoints-name, $breakpoint);\n  $breakpoint-width: map-get($breakpoints, $breakpoint);\n  @media (min-width: $breakpoint-width) {\n    .container,\n    .container-sm,\n    .container-md,\n    .container-lg,\n    .container-xl,\n    .container-fluid {\n      --grid-margin: var(--grid-#{$breakpoint-name}-margin);\n    }\n\n    .row {\n      --grid-gutter: var(--grid-#{$breakpoint-name}-gutter);\n    }\n    @if $breakpoint == \"sm\" {\n      .container,\n      .container-sm {\n        --grid-maxwidth: calc(\n          var(--grid-breakpoint-#{$breakpoint}) -\n            var(--grid-#{$breakpoint-name}-margin)\n        );\n      }\n    }\n    @if $breakpoint == \"md\" {\n      .container,\n      .container-sm,\n      .container-md {\n        --grid-maxwidth: calc(\n          var(--grid-breakpoint-#{$breakpoint}) -\n            var(--grid-#{$breakpoint-name}-margin)\n        );\n      }\n    }\n    @if $breakpoint == \"lg\" {\n      .container,\n      .container-sm,\n      .container-md,\n      .container-lg {\n        --grid-maxwidth: calc(\n          var(--grid-breakpoint-#{$breakpoint}) -\n            var(--grid-#{$breakpoint-name}-margin)\n        );\n      }\n    }\n    @if $breakpoint == \"xl\" {\n      .container,\n      .container-sm,\n      .container-md,\n      .container-lg,\n      .container-xl {\n        --grid-maxwidth: calc(\n          var(--grid-breakpoint-#{$breakpoint}) -\n            var(--grid-#{$breakpoint-name}-margin)\n        );\n      }\n    }\n    @include make-columns($grid-desktop-columns, $breakpoint);\n  }\n}\n\n/// Cria as colunas da Grid.\n/// @group 03\n/// @param {Number} $columns - **Usar**: 4, 8 ou 12\n/// @param {String} $breakpoint [null] - **Usar**: xs, sm, md, lg ou xl **(Opcional)**\n/// @example scss - Criar classes até 4 colunas\n///  @include make-columns(4);\n/// @example scss - Criar classes até 8 colunas para breakpoint **sm**\n///  @include make-columns(8, \"sm\");\n@mixin make-columns($columns, $breakpoint: null) {\n  .col#{if($breakpoint, \"-#{$breakpoint}\", \"\")} {\n    flex: 1 0 0%;\n    min-width: math.div(1, $columns) * 100%;\n  }\n  .col#{if($breakpoint, \"-#{$breakpoint}\", \"\")}-auto {\n    flex: 0 0 auto;\n    width: auto;\n  }\n  @for $i from 1 through $columns {\n    .col#{if($breakpoint, \"-#{$breakpoint}\", \"\")}-#{$i} {\n      flex-basis: math.div($i, $columns) * 100%;\n      max-width: math.div($i, $columns) * 100%;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}