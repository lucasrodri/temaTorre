{"version":3,"file":"components/step/step.min.js","mappings":"CAAA,SAAUA,EAAiCC,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,QAAS,GAAIH,GACM,iBAAZC,QACdA,QAAe,MAAID,IAEnBD,EAAY,MAAIC,IARlB,CASGK,MAAM,WACT,M,2BCVA,MAAMC,EACJC,YAAYC,EAAMC,GAQhBC,KAAKF,KAAOA,EACZE,KAAKD,UAAYA,EACjBC,KAAKC,cAAgB,EAErBD,KAAKE,WAAa,CAChBC,cAAe,gBACfC,SAAUJ,KAAKD,UAAUM,cAAc,kBACvCC,cAAe,oBACfC,UAAWP,KAAKD,UAAUS,iBAAiB,uBAQ7CR,KAAKS,iBAAmB,CAACC,EAASC,KAChCD,EAAQE,SAASC,IACfA,EAAKC,gBAAgBH,OASzBX,KAAKe,WAAa,CAACF,EAAMG,KACvB,IAAIC,EAAcJ,EAClB,MAAQI,EAAYC,UAAUC,SAASH,IACrCC,EAAcA,EAAYG,WAE5B,OAAOH,GAMTjB,KAAKqB,cAAiBR,GACbS,MAAMC,KAAKvB,KAAKE,WAAWK,WAAWiB,QAAQX,GAMvDb,KAAKyB,cAAgB,SAAUC,GAE7B1B,KAAKS,iBAAiBT,KAAKE,WAAWK,UAAW,UAIjDP,KAAKE,WAAWK,UAAUK,SAAQ,CAACC,EAAMc,KACnCA,IAAUD,IACZb,EAAKC,gBAAgB,YACrBD,EAAKe,aAAa,SAAU,QAGhC5B,KAAKC,cAAgByB,GAMvB1B,KAAK6B,YAAc,KACjB7B,KAAKE,WAAWK,UAAUK,SAAQ,CAACC,EAAMc,KACvC,MAAMG,EAAMjB,EAAKR,cAAc,cACzB0B,EAAO/B,UAA6C,SAA7CA,KAAKD,UAAUiC,aAAa,aAEvCnB,EAAKe,aACH,WACA,GAAGD,EAAQ,KAAK3B,KAAKE,WAAWK,UAAU0B,UAEnCH,EACTjB,EAAKe,aAAa,WAAY,IACzBf,EAAKe,aAAa,WAAYD,EAAQ,OAOjD3B,KAAKkC,QAAWR,IACd,MAAMS,EAAaT,GAAO1B,KAAKE,WAAWK,UAAU0B,OAASP,EAAM,EAAI,EACvE1B,KAAKyB,cAAcU,IAGrBnC,KAAKoC,eAOPA,eAuBE,GArBApC,KAAKE,WAAWE,SAASiC,iBAAiB,SAAUC,IAElD,MAAMC,EAAcD,EAAEE,OACtB,IAAKD,EAAYrB,UAAUC,SAAS,GAAGnB,KAAKE,WAAWI,iBAErD,YADAgC,EAAEE,OAAOpB,WAAWqB,QAItB,MAAMxC,EAAgBD,KAAKqB,cAAckB,GAEzCvC,KAAKyB,cAAcxB,MAIrBD,KAAK6B,cAED7B,KAAKD,UAAU2C,aAAa,gBAC9B1C,KAAKkC,QAAQlC,KAAKD,UAAUiC,aAAa,iBACpChC,KAAKkC,QAAQ,IAIjBlC,KAAKD,UAAUmB,UAAUC,SAAS,cAClCnB,KAAKD,UAAU2C,aAAa,eAC7B,CACA,MAAMC,EACJC,KAAKC,MAAM,IAAM7C,KAAKE,WAAWK,UAAU0B,QAAU,KAM7D,MAAe,M","sources":["webpack://dsgov/webpack/universalModuleDefinition","webpack://dsgov/./src/components/step/step.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"dsgov\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"dsgov\"] = factory();\n\telse\n\t\troot[\"dsgov\"] = factory();\n})(self, function() {\nreturn ","class BRStep {\n  constructor(name, component) {\n    /**\n     * Instancia um componente carousel\n     * @param {string} name - Component name\n     * @param {object} component - DOM root Object reference\n     * @property {number} activeStepNum - NÃºmero do palco ativo\n     * @property {array} DOMStrings - instancia dos elementos internos do componente\n     */\n    this.name = name\n    this.component = component\n    this.activeStepNum = 0\n    // DOM elements\n    this.DOMstrings = {\n      stepsBarClass: 'step-progress',\n      stepsBar: this.component.querySelector('.step-progress'),\n      stepsBtnClass: 'step-progress-btn',\n      stepsBtns: this.component.querySelectorAll('.step-progress-btn'),\n    }\n\n    /**\n     * Remove class from a set of items\n     * @param {object} elemSet - Elelment's List\n     * @param {string} button - Attribute name\n     */\n    this.removeAttributes = (elemSet, attrName) => {\n      elemSet.forEach((elem) => {\n        elem.removeAttribute(attrName)\n      })\n    }\n\n    /**\n     * Return exect parent node of the element\n     * @param {object} elem - element\n     * @param {string} button - father's class\n     */\n    this.findParent = (elem, parentClass) => {\n      let currentNode = elem\n      while (!currentNode.classList.contains(parentClass)) {\n        currentNode = currentNode.parentNode\n      }\n      return currentNode\n    }\n\n    /** get active button step number\n     * @param {object} elem - element\n     */\n    this.getActiveStep = (elem) => {\n      return Array.from(this.DOMstrings.stepsBtns).indexOf(elem)\n    }\n\n    /** Set all steps before clicked (and clicked too) to active\n     * @param {number} num - step number\n     */\n    this.setActiveStep = function (num) {\n      // remove active state from all the state\n      this.removeAttributes(this.DOMstrings.stepsBtns, 'active')\n      // this.removeAttributes(this.DOMstrings.stepsBtns, 'disabled')\n\n      // set picked items to active\n      this.DOMstrings.stepsBtns.forEach((elem, index) => {\n        if (index === num) {\n          elem.removeAttribute('disabled')\n          elem.setAttribute('active', '')\n        }\n      })\n      this.activeStepNum = num\n    }\n\n    /**\n     * Prints numbers labels into steps\n     */\n    this.setStepsNum = () => {\n      this.DOMstrings.stepsBtns.forEach((elem, index) => {\n        const img = elem.querySelector('.step-icon')\n        const text = this.component.getAttribute('data-type') === 'text'\n        if (text) {\n          elem.setAttribute(\n            'step-num',\n            `${index + 1}/${this.DOMstrings.stepsBtns.length}`\n          )\n        } else if (img) {\n          elem.setAttribute('step-num', '')\n        } else elem.setAttribute('step-num', index + 1)\n      })\n    }\n\n    /** Filters active step into range\n     * @param {number} num - step number\n     */\n    this.setStep = (num) => {\n      const activeStep = num <= this.DOMstrings.stepsBtns.length ? num - 1 : 0\n      this.setActiveStep(activeStep)\n    }\n\n    this._setBehavior()\n  }\n\n  /**\n   * Set component behaviors\n   * @private\n   */\n  _setBehavior() {\n    // STEPS BAR CLICK FUNCTION\n    this.DOMstrings.stepsBar.addEventListener('click', (e) => {\n      // check if click target is a step button\n      const eventTarget = e.target\n      if (!eventTarget.classList.contains(`${this.DOMstrings.stepsBtnClass}`)) {\n        e.target.parentNode.click()\n        return\n      }\n      // get active button step number\n      const activeStepNum = this.getActiveStep(eventTarget)\n      // set all steps before clicked (and clicked too) to active\n      this.setActiveStep(activeStepNum)\n    })\n\n    // Set Steps label number\n    this.setStepsNum()\n    // Set default active step\n    if (this.component.hasAttribute('data-initial')) {\n      this.setStep(this.component.getAttribute('data-initial'))\n    } else this.setStep(1)\n\n    // set steps buttons grid style if it needs to scroll horizontaly\n    if (\n      !this.component.classList.contains('vertical') &&\n      !this.component.hasAttribute('data-scroll')\n    ) {\n      const stepsWidth =\n        Math.round(100 / this.DOMstrings.stepsBtns.length) - 0.5\n      // this.DOMstrings.stepsBar.style.gridTemplateColumns = `repeat(auto-fit, minmax(100px, ${stepsWidth}% ))`\n    }\n  }\n}\n\nexport default BRStep\n"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","BRStep","constructor","name","component","this","activeStepNum","DOMstrings","stepsBarClass","stepsBar","querySelector","stepsBtnClass","stepsBtns","querySelectorAll","removeAttributes","elemSet","attrName","forEach","elem","removeAttribute","findParent","parentClass","currentNode","classList","contains","parentNode","getActiveStep","Array","from","indexOf","setActiveStep","num","index","setAttribute","setStepsNum","img","text","getAttribute","length","setStep","activeStep","_setBehavior","addEventListener","e","eventTarget","target","click","hasAttribute","stepsWidth","Math","round"],"sourceRoot":""}